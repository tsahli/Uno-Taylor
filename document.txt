{
  "name": "UNO-Game",
  
  "description": "Uno game implementation in Java.",
  
  "main": "src/UNOServer.java",
  
  "class": {
    "Card.java": {
      "value": "Value from 1 to 9 or a special card value",
      "color": "Red, Yellow, Green, Blue"
    },
    "Hand.java": {
      "user name": "Name of the user playing",
      "user cards": "List of cards a user will have."
    },
    "Deck.java": {
      "deck": "list of all the cards(108 total)"
    },
    "Client.java": {
      "connect to server": "clients first job is to connect to a server in its constructor",
      "retrieve message": "handling messages from the server",
      "send message": "sending a message to server inform of card or special instructions"
    },
    "Server.java": {
      "handle client": "client handling from the server/limitation of 4 players",
      "list of players": "active lists of all the players in the game",
      "retrieve message": "handling messages from the client",
      "send message": "sending a message to a client inform of card or special instructions"
    }
  },

  "gameflow": {
    "start": "Each player will get 7 random cards from the deck of 108 cards",
    "win": "If no cards are left in hand",
    "lose": "If any other player has no cards left",
    "uno": "attribute when a client is left with one card",
    "card ": {
      "kinds of cards: ": {
        "action cards": {
          "skip": "next player skips a step",
          "draw2": "next player draws two cards",
          "reverse": "reverses the order of the players orientation",
          "wild": "card can be used for any card except action cards",
          "wild4": "card can be used for any card except action cards with addition of drawing 4 cards by the next player."
        },
        "valued cards": "Values for 1 to 9"
      }
    },
    "color": "kinds of colors: red, yellow, green, blue",
    "card orientation": "Cards on a deck(down) or picked up(up) or in hand(inHand)"
  },

  "author": {
    "Karanpreet Singh": "To program on the server class and the dependencies",
    "Taylor Sahli": "To program on the server class and the dependencies",
    "Tenzin Rabjam": "To program on the rules flow from server with the client",
    "Justin Nguyen": "Inspector of the work flow/ to program on the prototype of the client"
  },
  
  "repository": {
    "type": "git",
    "url": ""
  }
}